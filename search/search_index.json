{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to OpenMovies API Documentation OpenMovies API is a web service designed to provide movie details. It's a personal project created to test and improve my skills in developing web APIs using C# and .NET. If you are interested in exploring movie information, feel free to integrate the OpenMovies API into your project. Features Movie Details: Retrieve comprehensive information about specific movies. Search Functionality: Perform searches using specific criteria to find movies. User-Friendly Documentation: Accessible and well-documented API to facilitate integration. Quick Links About OpenMovies Release Notes Note: OpenMovies API is a personal project created for skill development and experimentation.","title":"Home"},{"location":"#welcome-to-openmovies-api-documentation","text":"OpenMovies API is a web service designed to provide movie details. It's a personal project created to test and improve my skills in developing web APIs using C# and .NET. If you are interested in exploring movie information, feel free to integrate the OpenMovies API into your project.","title":"Welcome to OpenMovies API Documentation"},{"location":"#features","text":"Movie Details: Retrieve comprehensive information about specific movies. Search Functionality: Perform searches using specific criteria to find movies. User-Friendly Documentation: Accessible and well-documented API to facilitate integration.","title":"Features"},{"location":"#quick-links","text":"About OpenMovies Release Notes Note: OpenMovies API is a personal project created for skill development and experimentation.","title":"Quick Links"},{"location":"about/","text":"About OpenMovies API OpenMovies is a RESTful Web API project developed to test my skills in API development using .NET/C#. The goal is to provide endpoints for exploring movie details, performing searches with specific criteria, and offering accessible documentation to facilitate integration. Project Details Developed with .NET 8, C#, and ASP.NET Core. GitHub Repository LinkedIn Email Project Background OpenMovies is a personal project created to challenge and enhance my API development skills. It allows me to apply and experiment with the latest technologies and best practices in the field. The API is designed to be user-friendly, providing a seamless experience for developers interested in exploring and integrating movie-related data. Note: This project is a personal initiative for skill development and experimentation.","title":"About"},{"location":"about/#about-openmovies-api","text":"OpenMovies is a RESTful Web API project developed to test my skills in API development using .NET/C#. The goal is to provide endpoints for exploring movie details, performing searches with specific criteria, and offering accessible documentation to facilitate integration.","title":"About OpenMovies API"},{"location":"about/#project-details","text":"Developed with .NET 8, C#, and ASP.NET Core. GitHub Repository LinkedIn Email","title":"Project Details"},{"location":"about/#project-background","text":"OpenMovies is a personal project created to challenge and enhance my API development skills. It allows me to apply and experiment with the latest technologies and best practices in the field. The API is designed to be user-friendly, providing a seamless experience for developers interested in exploring and integrating movie-related data. Note: This project is a personal initiative for skill development and experimentation.","title":"Project Background"},{"location":"endpoints/categories/","text":"Categories Endpoint Overview The /api/categories/ endpoint provides operations related to categories. Here are the key functionalities available: Get All Categories : Returns a list of all categories. Get Category by ID : Returns details of a specific category based on the ID. Create Category : Creates a new category based on the provided data. Update Category : Updates an existing category based on the ID. Delete Category : Deletes a category based on the ID. Each operation has its own route and specific purpose. Click on the links above to get more details about each resource. This is a simple summary providing an overview of the main features available in the Categories Endpoint. The links allow developers to directly access detailed information about each operation.","title":"Categories"},{"location":"endpoints/categories/#categories-endpoint-overview","text":"The /api/categories/ endpoint provides operations related to categories. Here are the key functionalities available: Get All Categories : Returns a list of all categories. Get Category by ID : Returns details of a specific category based on the ID. Create Category : Creates a new category based on the provided data. Update Category : Updates an existing category based on the ID. Delete Category : Deletes a category based on the ID. Each operation has its own route and specific purpose. Click on the links above to get more details about each resource. This is a simple summary providing an overview of the main features available in the Categories Endpoint. The links allow developers to directly access detailed information about each operation.","title":"Categories Endpoint Overview"},{"location":"endpoints/directors/","text":"Directors Endpoint Overview The /api/directors/ endpoint provides operations related to directors. Here are the key functionalities available: Get All Directors : Returns a list of all directors. Get Director by ID : Returns details of a specific director based on the ID. Create Director : Creates a new director based on the provided data. Update Director : Updates an existing director based on the ID. Delete Director : Deletes a director based on the ID. Each operation has its own route and specific purpose. Click on the links above to get more details about each resource. This is a simple summary providing an overview of the main features available in the Directors Endpoint. The links allow developers to directly access detailed information about each operation.","title":"Directors"},{"location":"endpoints/directors/#directors-endpoint-overview","text":"The /api/directors/ endpoint provides operations related to directors. Here are the key functionalities available: Get All Directors : Returns a list of all directors. Get Director by ID : Returns details of a specific director based on the ID. Create Director : Creates a new director based on the provided data. Update Director : Updates an existing director based on the ID. Delete Director : Deletes a director based on the ID. Each operation has its own route and specific purpose. Click on the links above to get more details about each resource. This is a simple summary providing an overview of the main features available in the Directors Endpoint. The links allow developers to directly access detailed information about each operation.","title":"Directors Endpoint Overview"},{"location":"endpoints/movies/","text":"Movies Endpoint Overview The /api/movies/ endpoint provides operations related to movies. Here are the key functionalities available: Get All Movies : Returns a paginated list of all movies. Get Movie by ID : Returns details of a specific movie based on the ID. Create Movie : Creates a new movie based on the provided data. Update Movie : Updates an existing movie based on the ID. Delete Movie : Deletes a movie based on the ID. Search Movies : Performs a search for movies based on various criteria. Each operation has its own route and specific purpose. Click on the links above to get more details about each resource. This is a simple summary providing an overview of the main features available in the Movies Endpoint. The links allow developers to directly access detailed information about each operation.","title":"Movies"},{"location":"endpoints/movies/#movies-endpoint-overview","text":"The /api/movies/ endpoint provides operations related to movies. Here are the key functionalities available: Get All Movies : Returns a paginated list of all movies. Get Movie by ID : Returns details of a specific movie based on the ID. Create Movie : Creates a new movie based on the provided data. Update Movie : Updates an existing movie based on the ID. Delete Movie : Deletes a movie based on the ID. Search Movies : Performs a search for movies based on various criteria. Each operation has its own route and specific purpose. Click on the links above to get more details about each resource. This is a simple summary providing an overview of the main features available in the Movies Endpoint. The links allow developers to directly access detailed information about each operation.","title":"Movies Endpoint Overview"},{"location":"endpoints/categories/create-category/","text":"Create Category Endpoint HTTP method: POST URL: api/categories Description Creates a new category based on the provided data. Request body Name (required): The name of the category. Example request POST /api/categories Content-Type: application/json { \"Name\": \"Adventure\" } Response HTTP 201 Create : Returns details of the newly created category. { \"id\": 2, \"name\": \"Adventure\" } Error responses HTTP 400 Bad Request : If the request body is invalid. HTTP 409 Conflict : If a category with the same name already exists.","title":"Create Category"},{"location":"endpoints/categories/create-category/#create-category","text":"","title":"Create Category"},{"location":"endpoints/categories/create-category/#endpoint","text":"HTTP method: POST URL: api/categories","title":"Endpoint"},{"location":"endpoints/categories/create-category/#description","text":"Creates a new category based on the provided data.","title":"Description"},{"location":"endpoints/categories/create-category/#request-body","text":"Name (required): The name of the category.","title":"Request body"},{"location":"endpoints/categories/create-category/#example-request","text":"POST /api/categories Content-Type: application/json { \"Name\": \"Adventure\" }","title":"Example request"},{"location":"endpoints/categories/create-category/#response","text":"HTTP 201 Create : Returns details of the newly created category. { \"id\": 2, \"name\": \"Adventure\" }","title":"Response"},{"location":"endpoints/categories/create-category/#error-responses","text":"HTTP 400 Bad Request : If the request body is invalid. HTTP 409 Conflict : If a category with the same name already exists.","title":"Error responses"},{"location":"endpoints/categories/delete-category/","text":"Delete Category Deletes a category based on the provided ID. Endpoint HTTP method: DELETE URL: /api/categories/{id} Path parameters id (required): The unique identifier of the category. Example request DELETE /api/categories/1 Response HTTP 204 No Content : Successfully deletes the category. Error response HTTP 404 Not Found : If no category is found with the specified ID.","title":"Delete Category"},{"location":"endpoints/categories/delete-category/#delete-category","text":"Deletes a category based on the provided ID.","title":"Delete Category"},{"location":"endpoints/categories/delete-category/#endpoint","text":"HTTP method: DELETE URL: /api/categories/{id}","title":"Endpoint"},{"location":"endpoints/categories/delete-category/#path-parameters","text":"id (required): The unique identifier of the category.","title":"Path parameters"},{"location":"endpoints/categories/delete-category/#example-request","text":"DELETE /api/categories/1","title":"Example request"},{"location":"endpoints/categories/delete-category/#response","text":"HTTP 204 No Content : Successfully deletes the category.","title":"Response"},{"location":"endpoints/categories/delete-category/#error-response","text":"HTTP 404 Not Found : If no category is found with the specified ID.","title":"Error response"},{"location":"endpoints/categories/get-all/","text":"Get All Categories Endpoint HTTP method: GET URL: api/categories/ Description Retrieves a list of all categories available. Example request GET /api/categories/ Response HTTP 200 OK : Returns a list of all categories. [ { \"Id\": 1, \"Name\": \"Action\" }, { \"Id\": 2, \"Name\": \"Comedy\" }, { \"Id\": 3, \"Name\": \"Drama\" } // ... other categories ]","title":"Get All Categories"},{"location":"endpoints/categories/get-all/#get-all-categories","text":"","title":"Get All Categories"},{"location":"endpoints/categories/get-all/#endpoint","text":"HTTP method: GET URL: api/categories/","title":"Endpoint"},{"location":"endpoints/categories/get-all/#description","text":"Retrieves a list of all categories available.","title":"Description"},{"location":"endpoints/categories/get-all/#example-request","text":"GET /api/categories/","title":"Example request"},{"location":"endpoints/categories/get-all/#response","text":"HTTP 200 OK : Returns a list of all categories. [ { \"Id\": 1, \"Name\": \"Action\" }, { \"Id\": 2, \"Name\": \"Comedy\" }, { \"Id\": 3, \"Name\": \"Drama\" } // ... other categories ]","title":"Response"},{"location":"endpoints/categories/get-by-id/","text":"Get Category by ID Endpoint HTTP method: GET URL: api/categories/{id} Description Retrieves details of a specific category based on the provided ID. Path parameters id (required): The unique identifier of the category. Example request GET /api/categories/1 Response HTTP 200 OK : Returns details of the specified category. { \"Id\": 1, \"Name\": \"Action\" } Error response HTTP 404 Not Found : If no category is found with the specified ID.","title":"Get Category by ID"},{"location":"endpoints/categories/get-by-id/#get-category-by-id","text":"","title":"Get Category by ID"},{"location":"endpoints/categories/get-by-id/#endpoint","text":"HTTP method: GET URL: api/categories/{id}","title":"Endpoint"},{"location":"endpoints/categories/get-by-id/#description","text":"Retrieves details of a specific category based on the provided ID.","title":"Description"},{"location":"endpoints/categories/get-by-id/#path-parameters","text":"id (required): The unique identifier of the category.","title":"Path parameters"},{"location":"endpoints/categories/get-by-id/#example-request","text":"GET /api/categories/1","title":"Example request"},{"location":"endpoints/categories/get-by-id/#response","text":"HTTP 200 OK : Returns details of the specified category. { \"Id\": 1, \"Name\": \"Action\" }","title":"Response"},{"location":"endpoints/categories/get-by-id/#error-response","text":"HTTP 404 Not Found : If no category is found with the specified ID.","title":"Error response"},{"location":"endpoints/categories/update-category/","text":"Update Category Endpoint HTTP method: PUT URL: api/categories/{id} Description Updates an existing category based on the provided data and category ID. Path parameters id (required): The unique identifier of the category. Request body Name (required): The updated name of the category. Example request PUT /api/categories/2 Content-Type: application/json { \"Name\": \"Fantasy\" } Response HTTP 204 No Content : Indicates a sucessful update. Error responses HTTP 400 Bad Request : If the request body is invalid. HTTP 404 Not found : If no category is found with the specified ID.","title":"Update Category"},{"location":"endpoints/categories/update-category/#update-category","text":"","title":"Update Category"},{"location":"endpoints/categories/update-category/#endpoint","text":"HTTP method: PUT URL: api/categories/{id}","title":"Endpoint"},{"location":"endpoints/categories/update-category/#description","text":"Updates an existing category based on the provided data and category ID.","title":"Description"},{"location":"endpoints/categories/update-category/#path-parameters","text":"id (required): The unique identifier of the category.","title":"Path parameters"},{"location":"endpoints/categories/update-category/#request-body","text":"Name (required): The updated name of the category.","title":"Request body"},{"location":"endpoints/categories/update-category/#example-request","text":"PUT /api/categories/2 Content-Type: application/json { \"Name\": \"Fantasy\" }","title":"Example request"},{"location":"endpoints/categories/update-category/#response","text":"HTTP 204 No Content : Indicates a sucessful update.","title":"Response"},{"location":"endpoints/categories/update-category/#error-responses","text":"HTTP 400 Bad Request : If the request body is invalid. HTTP 404 Not found : If no category is found with the specified ID.","title":"Error responses"},{"location":"endpoints/directors/create-director/","text":"Create Director Endpoint HTTP method : POST URL : api/directors/ Description Creates a new director based on the provided data. Request Body The request body should contain JSON data with the following properties: FirstName (string, required): First name of the director. LastName (string, required): Last name of the director. Example: { \"FirstName\": \"Christopher\", \"LastName\": \"Nolan\" } Response HTTP 201 Created : Returns the created director. { \"id\": 1, \"firstName\": \"Christopher\", \"lastName\": \"Nolan\" } Error response HTTP 400 Bad Request : If the request body is invalid or missing required properties. HTTP 409 Conflict : If there is a conflict, such as trying to create a director with a duplicate name","title":"Create Director"},{"location":"endpoints/directors/create-director/#create-director","text":"","title":"Create Director"},{"location":"endpoints/directors/create-director/#endpoint","text":"HTTP method : POST URL : api/directors/","title":"Endpoint"},{"location":"endpoints/directors/create-director/#description","text":"Creates a new director based on the provided data.","title":"Description"},{"location":"endpoints/directors/create-director/#request","text":"","title":"Request"},{"location":"endpoints/directors/create-director/#body","text":"The request body should contain JSON data with the following properties: FirstName (string, required): First name of the director. LastName (string, required): Last name of the director. Example: { \"FirstName\": \"Christopher\", \"LastName\": \"Nolan\" }","title":"Body"},{"location":"endpoints/directors/create-director/#response","text":"HTTP 201 Created : Returns the created director. { \"id\": 1, \"firstName\": \"Christopher\", \"lastName\": \"Nolan\" }","title":"Response"},{"location":"endpoints/directors/create-director/#error-response","text":"HTTP 400 Bad Request : If the request body is invalid or missing required properties. HTTP 409 Conflict : If there is a conflict, such as trying to create a director with a duplicate name","title":"Error response"},{"location":"endpoints/directors/delete-director/","text":"Delete Director by ID Endpoint HTTP method : DELETE URL : api/directors/{id} Description Deletes a director based on the provided ID. Path parameters id (required): The unique identifier of the director. Example request DELETE /api/directors/1 Response HTTP 204 No Content : The director is successfully deleted. Error response HTTP 404 Not Found : If no director is found with the specified ID.","title":"Delete Director by ID"},{"location":"endpoints/directors/delete-director/#delete-director-by-id","text":"","title":"Delete Director by ID"},{"location":"endpoints/directors/delete-director/#endpoint","text":"HTTP method : DELETE URL : api/directors/{id}","title":"Endpoint"},{"location":"endpoints/directors/delete-director/#description","text":"Deletes a director based on the provided ID.","title":"Description"},{"location":"endpoints/directors/delete-director/#path-parameters","text":"id (required): The unique identifier of the director.","title":"Path parameters"},{"location":"endpoints/directors/delete-director/#example-request","text":"DELETE /api/directors/1","title":"Example request"},{"location":"endpoints/directors/delete-director/#response","text":"HTTP 204 No Content : The director is successfully deleted.","title":"Response"},{"location":"endpoints/directors/delete-director/#error-response","text":"HTTP 404 Not Found : If no director is found with the specified ID.","title":"Error response"},{"location":"endpoints/directors/get-all/","text":"Get All Directors Endpoint HTTP method : GET URL : api/directors Description Returns a list of all directors. Example request GET /api/directors [ { \"Id\": 1, \"FirstName\": \"Christopher\", \"LastName\": \"Nolan\" }, { \"Id\": 2, \"FirstName\": \"Quentin\", \"LastName\": \"Tarantino\" }, // ... other directors ]","title":"Get All Directors"},{"location":"endpoints/directors/get-all/#get-all-directors","text":"","title":"Get All Directors"},{"location":"endpoints/directors/get-all/#endpoint","text":"HTTP method : GET URL : api/directors","title":"Endpoint"},{"location":"endpoints/directors/get-all/#description","text":"Returns a list of all directors.","title":"Description"},{"location":"endpoints/directors/get-all/#example-request","text":"GET /api/directors [ { \"Id\": 1, \"FirstName\": \"Christopher\", \"LastName\": \"Nolan\" }, { \"Id\": 2, \"FirstName\": \"Quentin\", \"LastName\": \"Tarantino\" }, // ... other directors ]","title":"Example request"},{"location":"endpoints/directors/get-by-id/","text":"Get Director by ID Endpoint HTTP method : GET URL : api/directors/{id} Description Retrieves details of a specific director based on the provided ID. Path parameters id (required): The unique identifier of the director. Example request GET /api/directors/1 Response HTTP 200 OK : Returns details of the specified director. { \"id\": 1, \"firstName\": \"Christopher\", \"lastName\": \"Nolan\" } Error response HTTP 404 NotFound : If no director is found with the specified ID.","title":"Get Director by ID"},{"location":"endpoints/directors/get-by-id/#get-director-by-id","text":"","title":"Get Director by ID"},{"location":"endpoints/directors/get-by-id/#endpoint","text":"HTTP method : GET URL : api/directors/{id}","title":"Endpoint"},{"location":"endpoints/directors/get-by-id/#description","text":"Retrieves details of a specific director based on the provided ID.","title":"Description"},{"location":"endpoints/directors/get-by-id/#path-parameters","text":"id (required): The unique identifier of the director.","title":"Path parameters"},{"location":"endpoints/directors/get-by-id/#example-request","text":"GET /api/directors/1","title":"Example request"},{"location":"endpoints/directors/get-by-id/#response","text":"HTTP 200 OK : Returns details of the specified director. { \"id\": 1, \"firstName\": \"Christopher\", \"lastName\": \"Nolan\" }","title":"Response"},{"location":"endpoints/directors/get-by-id/#error-response","text":"HTTP 404 NotFound : If no director is found with the specified ID.","title":"Error response"},{"location":"endpoints/directors/update-director/","text":"Update Director by ID Endpoint HTTP method : PUT URL : api/directors/{id} Description Updates the information of a specific director based on the provided ID. Path parameters id (required): The unique identifier of the director. Example request PUT /api/directors/1 Content-Type: application/json { \"firstName\": \"UpdatedFirstName\", \"lastName\": \"UpdatedLastName\" } Response HTTP 204 No Content : The director information is successfully updated. Error response HTTP 400 Bad Request : If the request payload is invalid.","title":"Update Director by ID"},{"location":"endpoints/directors/update-director/#update-director-by-id","text":"","title":"Update Director by ID"},{"location":"endpoints/directors/update-director/#endpoint","text":"HTTP method : PUT URL : api/directors/{id}","title":"Endpoint"},{"location":"endpoints/directors/update-director/#description","text":"Updates the information of a specific director based on the provided ID.","title":"Description"},{"location":"endpoints/directors/update-director/#path-parameters","text":"id (required): The unique identifier of the director.","title":"Path parameters"},{"location":"endpoints/directors/update-director/#example-request","text":"PUT /api/directors/1 Content-Type: application/json { \"firstName\": \"UpdatedFirstName\", \"lastName\": \"UpdatedLastName\" }","title":"Example request"},{"location":"endpoints/directors/update-director/#response","text":"HTTP 204 No Content : The director information is successfully updated.","title":"Response"},{"location":"endpoints/directors/update-director/#error-response","text":"HTTP 400 Bad Request : If the request payload is invalid.","title":"Error response"},{"location":"endpoints/movies/create-movie/","text":"Create Movie Endpoint HTTP method : POST URL : api/movies Content Type : multipart/form-data Description Create a new movie the provided information, including title, release date, synopsis, cover image, trailers, director, and category. Request Body Parameter Type Description Title String The title of the movie. ReleaseDateOf DateTime The release date of the movie. Synopsis String A brief description or synopsis of the movie. Cover File The cover image of the movie. Trailers List of Objects A list of trailers for the movie. DirectorId Integer The unique identifier of the director. CategoryId Integer The unique identifier of the category. Trailer Object Parameter Type (Enum) Description Type Enum (0/1) The type of the trailer (0: Official, 1: Teaser). Platform Enum (0/1) The platform where the trailer is hosted (0: Youtube, 1: Vimeo). Link String The link to the trailer. Example request POST /api/movies Contenty-Type: multipart/form-data Title=Example Film ReleaseDateOf=2022-01-01 00:00:00 Synopsis=An example movie synopsis. Cover=@example-cover.jpg;type=image/jpeg Trailers[0].Type=0 Trailers[0].Plataform=0 Trailers[0].Link=https://www.youtube.com/watch?v=example DirectorId=1 CategoryId=1 Response HTTP 201 Created : Returns the details of the created movie Error response HTTP 400 Bad Request : If the request is invalid, providing details about the errors. HTTP 404 Not Found : If the specified director or category is not found","title":"Create Movie"},{"location":"endpoints/movies/create-movie/#create-movie","text":"","title":"Create Movie"},{"location":"endpoints/movies/create-movie/#endpoint","text":"HTTP method : POST URL : api/movies Content Type : multipart/form-data","title":"Endpoint"},{"location":"endpoints/movies/create-movie/#description","text":"Create a new movie the provided information, including title, release date, synopsis, cover image, trailers, director, and category.","title":"Description"},{"location":"endpoints/movies/create-movie/#request-body","text":"Parameter Type Description Title String The title of the movie. ReleaseDateOf DateTime The release date of the movie. Synopsis String A brief description or synopsis of the movie. Cover File The cover image of the movie. Trailers List of Objects A list of trailers for the movie. DirectorId Integer The unique identifier of the director. CategoryId Integer The unique identifier of the category.","title":"Request Body"},{"location":"endpoints/movies/create-movie/#trailer-object","text":"Parameter Type (Enum) Description Type Enum (0/1) The type of the trailer (0: Official, 1: Teaser). Platform Enum (0/1) The platform where the trailer is hosted (0: Youtube, 1: Vimeo). Link String The link to the trailer.","title":"Trailer Object"},{"location":"endpoints/movies/create-movie/#example-request","text":"POST /api/movies Contenty-Type: multipart/form-data Title=Example Film ReleaseDateOf=2022-01-01 00:00:00 Synopsis=An example movie synopsis. Cover=@example-cover.jpg;type=image/jpeg Trailers[0].Type=0 Trailers[0].Plataform=0 Trailers[0].Link=https://www.youtube.com/watch?v=example DirectorId=1 CategoryId=1","title":"Example request"},{"location":"endpoints/movies/create-movie/#response","text":"HTTP 201 Created : Returns the details of the created movie","title":"Response"},{"location":"endpoints/movies/create-movie/#error-response","text":"HTTP 400 Bad Request : If the request is invalid, providing details about the errors. HTTP 404 Not Found : If the specified director or category is not found","title":"Error response"},{"location":"endpoints/movies/delete-movie/","text":"Delete Movie Endpoint HTTP method : DELETE URL : api/movies/{id} Description Delete a specific movie based on the provided ID. Path parameters id (required): The unique identifier of the movie. Example request DELETE api/movies/1 Response HTTP 204 No Content : Indicates successful deletion of the specified movie. Error response HTTP 404 Not Found : If no movies is found with the specified ID.","title":"Delete Movie"},{"location":"endpoints/movies/delete-movie/#delete-movie","text":"","title":"Delete Movie"},{"location":"endpoints/movies/delete-movie/#endpoint","text":"HTTP method : DELETE URL : api/movies/{id}","title":"Endpoint"},{"location":"endpoints/movies/delete-movie/#description","text":"Delete a specific movie based on the provided ID.","title":"Description"},{"location":"endpoints/movies/delete-movie/#path-parameters","text":"id (required): The unique identifier of the movie.","title":"Path parameters"},{"location":"endpoints/movies/delete-movie/#example-request","text":"DELETE api/movies/1","title":"Example request"},{"location":"endpoints/movies/delete-movie/#response","text":"HTTP 204 No Content : Indicates successful deletion of the specified movie.","title":"Response"},{"location":"endpoints/movies/delete-movie/#error-response","text":"HTTP 404 Not Found : If no movies is found with the specified ID.","title":"Error response"},{"location":"endpoints/movies/get-all-movies/","text":"Get all movies Endpoint HTTP Method : GET URL : api/movies/ Description Retrieves a paginated list of all movies. Query Parameters pageNumber (optional): Page number of pagination (default: 1). pageSize (optional): Number of items per page (default: 10). Response HTTP 200 OK : Returns a paginated list of movies. { \"Count\": 20, \"Next\": \"/api/movies/?pageNumber=3\", \"Previous\": \"/api/movies/?pageNumber=1\", \"Results\": [ { \"Id\": 1, \"Title\": \"Movie Title\", \"ReleaseDateOf\": \"2022-01-01T00:00:00\", \"ReleaseYear\": 2022, \"Synopsis\": \"Movie synopsis...\", \"Trailers\": [], \"Director\": { \"Id\": 1, \"FirstName\": \"John\", \"LastName\": \"Doe\" }, \"Category\": { \"Id\": 1, \"Name\": \"Action\" }, \"CoverImagePath\": \"/images/movie_cover.jpg\" }, // ... additional movies ... ] }","title":"Get all movies"},{"location":"endpoints/movies/get-all-movies/#get-all-movies","text":"","title":"Get all movies"},{"location":"endpoints/movies/get-all-movies/#endpoint","text":"HTTP Method : GET URL : api/movies/","title":"Endpoint"},{"location":"endpoints/movies/get-all-movies/#description","text":"Retrieves a paginated list of all movies.","title":"Description"},{"location":"endpoints/movies/get-all-movies/#query-parameters","text":"pageNumber (optional): Page number of pagination (default: 1). pageSize (optional): Number of items per page (default: 10).","title":"Query Parameters"},{"location":"endpoints/movies/get-all-movies/#response","text":"HTTP 200 OK : Returns a paginated list of movies. { \"Count\": 20, \"Next\": \"/api/movies/?pageNumber=3\", \"Previous\": \"/api/movies/?pageNumber=1\", \"Results\": [ { \"Id\": 1, \"Title\": \"Movie Title\", \"ReleaseDateOf\": \"2022-01-01T00:00:00\", \"ReleaseYear\": 2022, \"Synopsis\": \"Movie synopsis...\", \"Trailers\": [], \"Director\": { \"Id\": 1, \"FirstName\": \"John\", \"LastName\": \"Doe\" }, \"Category\": { \"Id\": 1, \"Name\": \"Action\" }, \"CoverImagePath\": \"/images/movie_cover.jpg\" }, // ... additional movies ... ] }","title":"Response"},{"location":"endpoints/movies/get-movie-by-id/","text":"Get movie by ID Endpoint HTTP method : GET URL : api/movies/{id} Description Retrieves details of a specific movie based on the provided ID. This includes information about the movie and links to embedded trailers. Path parameters id (required): The unique identifier of the movie. Example request GET /api/movies/1 Response HTTP 200 OK : Returns details of the specified movie, including embedded links for each trailer. { \"Id\": 1, \"Title\": \"Inception\", \"ReleaseDateOf\": \"2010-07-16T00:00:00\", \"ReleaseYear\": 2010, \"Synopsis\": \"A thief who steals corporate secrets through the use of dream-sharing technology.\", \"Trailers\": [ { \"Id\": 1, \"Type\": 0, \"Platform\": 0, \"Link\": \"https://www.youtube.com/embed/d3A3-zSOBT4\", } ], \"Director\": { \"Id\": 1, \"FirstName\": \"Christopher\", \"LastName\": \"Nolan\" }, \"Category\": { \"Id\": 1, \"Name\": \"Sci-Fi\" }, \"CoverImagePath\": \"/images/inception_cover.jpg\" } Error response HTTP 404 Not Found : If no movie is found with the specified ID.","title":"Get movie by ID"},{"location":"endpoints/movies/get-movie-by-id/#get-movie-by-id","text":"","title":"Get movie by ID"},{"location":"endpoints/movies/get-movie-by-id/#endpoint","text":"HTTP method : GET URL : api/movies/{id}","title":"Endpoint"},{"location":"endpoints/movies/get-movie-by-id/#description","text":"Retrieves details of a specific movie based on the provided ID. This includes information about the movie and links to embedded trailers.","title":"Description"},{"location":"endpoints/movies/get-movie-by-id/#path-parameters","text":"id (required): The unique identifier of the movie.","title":"Path parameters"},{"location":"endpoints/movies/get-movie-by-id/#example-request","text":"GET /api/movies/1","title":"Example request"},{"location":"endpoints/movies/get-movie-by-id/#response","text":"HTTP 200 OK : Returns details of the specified movie, including embedded links for each trailer. { \"Id\": 1, \"Title\": \"Inception\", \"ReleaseDateOf\": \"2010-07-16T00:00:00\", \"ReleaseYear\": 2010, \"Synopsis\": \"A thief who steals corporate secrets through the use of dream-sharing technology.\", \"Trailers\": [ { \"Id\": 1, \"Type\": 0, \"Platform\": 0, \"Link\": \"https://www.youtube.com/embed/d3A3-zSOBT4\", } ], \"Director\": { \"Id\": 1, \"FirstName\": \"Christopher\", \"LastName\": \"Nolan\" }, \"Category\": { \"Id\": 1, \"Name\": \"Sci-Fi\" }, \"CoverImagePath\": \"/images/inception_cover.jpg\" }","title":"Response"},{"location":"endpoints/movies/get-movie-by-id/#error-response","text":"HTTP 404 Not Found : If no movie is found with the specified ID.","title":"Error response"},{"location":"endpoints/movies/search-movie/","text":"Search Movies Endpoint HTTP method : GET URL : api/movies/search Description Search for movies based on specified criteria such as name, release year, and category. Retrieve a paginated list of matching movies Query Parameters name (optional): Movie name to search for. releaseYear (optional): Release year of the movie. categoryId (optional): ID of the category to filter by. pageNumber (optional): Page number for pagination (default is 1). pageSize (optional): Number of items per page (default is 10). Example request GET /api/movies/search?name=Inception&releaseYear=2010&categoryId=1&pageNumber=1&pageSize=10 Response HTTP 200 OK : Returns a paginated list of movies that match the search criteria. { \"count\": 1, \"next\": null, \"previous\": null, \"results\": [ { \"title\": \"Spider-Man: Homecoming\", \"releaseDateOf\": \"2017-07-07T00:00:00\", \"releaseYear\": 2017, \"synopsis\": \"In Spider-Man: Homecoming, after acting alongside the Avengers, the time has come for Peter Parker (Tom Holland) to return home and to his life, which is no longer so normal.\", \"trailers\": [ { \"type\": 0, \"plataform\": 0, \"link\": \"https://www.youtube.com/watch?v=rk-dF1lIbIg\", \"id\": 2 } ], \"director\": { \"firstName\": \"Jon\", \"lastName\": \"Watts\", \"id\": 1 }, \"category\": { \"name\": \"Action\", \"id\": 1 }, \"coverImagePath\": \"images/cover_image.jpg\", \"id\": 1 } ] } Error response HTTP 500 Internal Server Error : If an unexpected error occurs during the search.","title":"Search Movies"},{"location":"endpoints/movies/search-movie/#search-movies","text":"","title":"Search Movies"},{"location":"endpoints/movies/search-movie/#endpoint","text":"HTTP method : GET URL : api/movies/search","title":"Endpoint"},{"location":"endpoints/movies/search-movie/#description","text":"Search for movies based on specified criteria such as name, release year, and category. Retrieve a paginated list of matching movies","title":"Description"},{"location":"endpoints/movies/search-movie/#query-parameters","text":"name (optional): Movie name to search for. releaseYear (optional): Release year of the movie. categoryId (optional): ID of the category to filter by. pageNumber (optional): Page number for pagination (default is 1). pageSize (optional): Number of items per page (default is 10).","title":"Query Parameters"},{"location":"endpoints/movies/search-movie/#example-request","text":"GET /api/movies/search?name=Inception&releaseYear=2010&categoryId=1&pageNumber=1&pageSize=10","title":"Example request"},{"location":"endpoints/movies/search-movie/#response","text":"HTTP 200 OK : Returns a paginated list of movies that match the search criteria. { \"count\": 1, \"next\": null, \"previous\": null, \"results\": [ { \"title\": \"Spider-Man: Homecoming\", \"releaseDateOf\": \"2017-07-07T00:00:00\", \"releaseYear\": 2017, \"synopsis\": \"In Spider-Man: Homecoming, after acting alongside the Avengers, the time has come for Peter Parker (Tom Holland) to return home and to his life, which is no longer so normal.\", \"trailers\": [ { \"type\": 0, \"plataform\": 0, \"link\": \"https://www.youtube.com/watch?v=rk-dF1lIbIg\", \"id\": 2 } ], \"director\": { \"firstName\": \"Jon\", \"lastName\": \"Watts\", \"id\": 1 }, \"category\": { \"name\": \"Action\", \"id\": 1 }, \"coverImagePath\": \"images/cover_image.jpg\", \"id\": 1 } ] }","title":"Response"},{"location":"endpoints/movies/search-movie/#error-response","text":"HTTP 500 Internal Server Error : If an unexpected error occurs during the search.","title":"Error response"},{"location":"endpoints/movies/update-movie/","text":"Update Movie Details Endpoint HTTP method : PUT URL : api/movies/{id} Description Update details of a specific movie identified by the provided ID. This includes modifying information such as title, release date, synopsis, director, category, trailers, and cover image. Path parameters id (required): The unique identifier of the movie. Request Request Headers Content-Type : multipart/form-data Request Body Title (optional): New title for the movie. ReleaseDataOf (optional): New release date for the movie. Synopsis (optional): New synopsis for the movie. Cover (optional): New cover image for the movie. Trailers (optional): List of trailers to be associated with the movie. Example request PUT /api/movies/1 Request body: { \"Title\": \"Inception 2.0\", \"ReleaseDateOf\": \"2022-12-01T00:00:00\", \"Synopsis\": \"A new twist to the dream-sharing saga.\", \"Cover\": (new cover image file), \"Trailers\": [ { \"Type\": 0, \"Plataform\": 0, \"Link\": \"https://www.youtube.com/watch?v=newtrailer\" } ] } Response HTTP 204 No Content : Movie details successfully updated. Error response HTTP 400 Bad Request : if the request body is invalid or contains errors. HTTP 404 Not Found : If no movie is found with the specified ID.","title":"Update Movie Details"},{"location":"endpoints/movies/update-movie/#update-movie-details","text":"","title":"Update Movie Details"},{"location":"endpoints/movies/update-movie/#endpoint","text":"HTTP method : PUT URL : api/movies/{id}","title":"Endpoint"},{"location":"endpoints/movies/update-movie/#description","text":"Update details of a specific movie identified by the provided ID. This includes modifying information such as title, release date, synopsis, director, category, trailers, and cover image.","title":"Description"},{"location":"endpoints/movies/update-movie/#path-parameters","text":"id (required): The unique identifier of the movie.","title":"Path parameters"},{"location":"endpoints/movies/update-movie/#request","text":"","title":"Request"},{"location":"endpoints/movies/update-movie/#request-headers","text":"Content-Type : multipart/form-data","title":"Request Headers"},{"location":"endpoints/movies/update-movie/#request-body","text":"Title (optional): New title for the movie. ReleaseDataOf (optional): New release date for the movie. Synopsis (optional): New synopsis for the movie. Cover (optional): New cover image for the movie. Trailers (optional): List of trailers to be associated with the movie.","title":"Request Body"},{"location":"endpoints/movies/update-movie/#example-request","text":"PUT /api/movies/1","title":"Example request"},{"location":"endpoints/movies/update-movie/#request-body_1","text":"{ \"Title\": \"Inception 2.0\", \"ReleaseDateOf\": \"2022-12-01T00:00:00\", \"Synopsis\": \"A new twist to the dream-sharing saga.\", \"Cover\": (new cover image file), \"Trailers\": [ { \"Type\": 0, \"Plataform\": 0, \"Link\": \"https://www.youtube.com/watch?v=newtrailer\" } ] }","title":"Request body:"},{"location":"endpoints/movies/update-movie/#response","text":"HTTP 204 No Content : Movie details successfully updated.","title":"Response"},{"location":"endpoints/movies/update-movie/#error-response","text":"HTTP 400 Bad Request : if the request body is invalid or contains errors. HTTP 404 Not Found : If no movie is found with the specified ID.","title":"Error response"},{"location":"release-notes/v1.0/","text":"Release Notes - Version 1.0 Lights, Camera, Action! Welcome to the grand opening of OpenMovies API Version 1.0 \ud83c\udf89\ud83c\udf7f Plot Highlights In this feature-packed release, we've crafted an experience that lets you unravel the cinematic secrets of your movie world. Here's a sneak peek at the main attractions: \ud83c\udfac Movie Magic Explore the intricate details of your favorite movies with our comprehensive set of CRUD operations. From creating new films to deleting old classics, OpenMovies has you covered. \ud83c\udfa5 Trailer Embeds Turn your YouTube trailer links into captivating embedded previews. Now your users can get a glimpse of the action without leaving your application. \ud83c\udf9e\ufe0f Cover Image Upload Capture the essence of each film by uploading cover images directly through the API. Manage the visual appeal of your movie database effortlessly. \ud83d\udd75\ufe0f\u200d\u2642\ufe0f Search & Discover Unleash the detective in you with powerful search functionalities. Find cinematic treasures based on categories, directors, or even the movie title.","title":"V1.0"},{"location":"release-notes/v1.0/#release-notes-version-10","text":"","title":"Release Notes - Version 1.0"},{"location":"release-notes/v1.0/#lights-camera-action","text":"Welcome to the grand opening of OpenMovies API Version 1.0 \ud83c\udf89\ud83c\udf7f","title":"Lights, Camera, Action!"},{"location":"release-notes/v1.0/#plot-highlights","text":"In this feature-packed release, we've crafted an experience that lets you unravel the cinematic secrets of your movie world. Here's a sneak peek at the main attractions:","title":"Plot Highlights"},{"location":"release-notes/v1.0/#movie-magic","text":"Explore the intricate details of your favorite movies with our comprehensive set of CRUD operations. From creating new films to deleting old classics, OpenMovies has you covered.","title":"\ud83c\udfac Movie Magic"},{"location":"release-notes/v1.0/#trailer-embeds","text":"Turn your YouTube trailer links into captivating embedded previews. Now your users can get a glimpse of the action without leaving your application.","title":"\ud83c\udfa5 Trailer Embeds"},{"location":"release-notes/v1.0/#cover-image-upload","text":"Capture the essence of each film by uploading cover images directly through the API. Manage the visual appeal of your movie database effortlessly.","title":"\ud83c\udf9e\ufe0f Cover Image Upload"},{"location":"release-notes/v1.0/#search-discover","text":"Unleash the detective in you with powerful search functionalities. Find cinematic treasures based on categories, directors, or even the movie title.","title":"\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Search &amp; Discover"}]}